#!/usr/bin/env bash
set -euo pipefail

_remote="$1"
_url="$2"

original_sha="$(git rev-parse HEAD)"
original_branch="$(git rev-parse --symbolic --abbrev-ref HEAD)"

unset stash_created
if git stash push -m "pre-push-stash" | grep -q 'Saved working directory' &> /dev/null; then
	stash_created=asdf
fi

restore_state() {
	git switch --detach "$original_sha" &> /dev/null
	git checkout "$original_branch" &> /dev/null
	if [[ -n "${stash_created+sentinal}" ]]; then
		git stash pop &> /dev/null
	fi
}
trap restore_state EXIT



zero="$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')"

push_index=0
while read local_ref local_oid remote_ref remote_oid; do
	((push_index+=1))

	if test "$local_oid" = "$zero"; then
		echo -e "SKIP: Obj is being deleted"
		continue
	fi

	if test "$remote_oid" = "$zero"; then
		# New branch
		range="$local_oid"
	else
		# Existing branch
		range="$remote_oid..$local_oid"
	fi

	commit_index=0
	git rev-list "$range" | tac | while read commit; do
		((commit_index+=1))
		echo "Testing push $push_index, commit $commit_index"

		git switch --detach "$commit" &> /dev/null

		logs="$(cargo fmt --check 2>&1)" || status="$?"
		if [ "${status:-0}" -ne 0 ]; then
			echo "$logs"
			echo
			echo "Commit $commit failed cargo fmt --check."
			exit "$status"
		fi

		logs="$(RUSTFLAGS="-D warnings" cargo test --all-features --profile=release 2>&1)" || status="$?"
		if [ "${status:-0}" -ne 0 ]; then
			echo "$logs"
			echo
			echo "Commit $commit failed cargo test."
			exit "$status"
		fi
	done
done
